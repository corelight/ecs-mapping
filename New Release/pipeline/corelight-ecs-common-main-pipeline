{
  "description": "Corelight ingest pipeline for all logs. Common parsings amongst each data/log type. This ingest pipeline is from the Github repository https://github.com/corelight/ecs-mapping. Please file all questions or issues with this configuration in the corresponding Github repository.",
  "processors" : [
    {
      "set": {
        "field": "temporary_metadata_is_protocol_log",
        "value": "yes",
        "override": true
      }
    },
    {
      "set": {
        "field": "ecs.version",
        "value": "8.11.0"
      }
    },
    {
      "set": {
        "field": "labels.corelight.ecs_version",
        "value": "8.11.0.1"
      }
    },
    {
      "set": {
        "field": "labels.corelight.ecs_method",
        "value": "ingest_pipeline"
      }
    },
    {
      "set": {
        "field": "labels.corelight.ecs_method_version",
        "value": "2023120101"
      }
    },
    {
      "set": {
        "field": "event.kind",
        "value": "tbd"
      }
    },
    {
      "set": {
        "field": "event.category",
        "value": "tbd"
      }
    },
    {
      "set": {
        "field": "event.type",
        "value": "tbd"
      }
    },
    {
      "set": {
        "field": "event.module",
        "value": "corelight"
      }
    },
    {
      "set": {
        "field": "labels.corelight.event_category",
        "value": "tbd"
      }
    },
    {
      "set": {
        "field": "labels.corelight.event_sub_type",
        "value": "tbd"
      }
    },
    {
      "set": {
        "field": "observer.type",
        "value": "sensor"
      }
    },
    {
      "set": {
        "field": "observer.vendor",
        "value": "Corelight"
      }
    },
    {
      "rename": {
        "field": "@path",
        "target_field": "event.dataset",
        "ignore_missing": true,
        "if": "ctx['@path'] != null"
      }
    },
    {
      "rename": {
        "field": "_path",
        "target_field": "event.dataset",
        "ignore_missing": true,
        "if": "ctx?._path != null"
      }
    },
    {
      "rename": {
        "field": "type",
        "target_field": "event.dataset",
        "ignore_missing": true
      }
    },
    {
      "rename": {
        "field": "@stream",
        "target_field": "event.dataset",
        "ignore_missing": true,
        "if": "ctx['@stream'] != null"
      }
    },
    {
      "date": {
        "field": "ts",
        "target_field": "@timestamp",
        "formats": [ "ISO8601", "UNIX" ],
        "if": "ctx?.ts != null",
        "on_failure": [
          {
            "date": {
              "field": "ts",
              "target_field": "@timestamp",
              "formats": [ "UNIX", "ISO8601" ],
              "if": "ctx?.ts != null && ctx['@timestamp'] == null",
              "on_failure": [
                {
                  "append": {
                    "field": "tags",
                    "value": ["parse_failure_critical", "ts date parsing error "],
                    "allow_duplicates": false,
                    "ignore_failure": false
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "date": {
        "field": "_write_ts",
        "target_field": "event.created",
        "formats": ["ISO8601"],
        "if": "ctx?._write_ts != null"
      }
    },
    {
      "dot_expander": {
        "field": "id.orig_h",
        "if": "ctx['id.orig_h'] != null"
      }
    },
    {
      "rename": {
        "field": "source",
        "target_field": "temp_source",
        "if": "ctx?.source != null"
      }
    },
    {
      "rename": {
        "field": "host",
        "target_field": "temp_host",
        "if": "ctx?.host != null"
      }
    },
    {
      "rename": {
        "field": "port",
        "target_field": "temp_port",
        "if": "ctx?.port != null"
      }
    },
    {
      "rename": {
        "field": "id.orig_h",
        "target_field": "source.ip",
        "ignore_missing": true,
        "if": "ctx?.id instanceof Map && ctx?.id?.orig_h != null"
      }
    },
    {
      "dot_expander": {
        "field": "id.orig_p",
        "if": "ctx['id.orig_p'] != null"
      }
    },
    {
      "rename": {
        "field": "id.orig_p",
        "target_field": "source.port",
        "ignore_missing": true,
        "if": "ctx?.id instanceof Map && ctx?.id?.orig_p != null"
      }
    },
    {
      "dot_expander": {
        "field": "id.resp_h",
        "if": "ctx['id.resp_h'] != null"
      }
    },
    {
      "rename": {
        "field": "id.resp_h",
        "target_field": "destination.ip",
        "ignore_missing": true,
        "if": "ctx?.id instanceof Map && ctx?.id?.resp_h != null"
      }
    },
    {
      "dot_expander": {
        "field": "id.resp_p",
        "if": "ctx['id.resp_p'] != null"
      }
    },
    {
      "rename": {
        "field": "id.resp_p",
        "target_field": "destination.port",
        "ignore_missing": true,
        "if": "ctx?.id instanceof Map && ctx?.id?.resp_p != null"
      }
    },
    {
      "rename": {
        "field": "id_orig_h",
        "target_field": "source.ip",
        "if": "ctx?.id_orig_h != null"
      }
    },
    {
      "rename": {
        "field": "id_orig_p",
        "target_field": "source.port",
        "if": "ctx?.id_orig_p != null"
      }
    },
    {
      "rename": {
        "field": "id_resp_h",
        "target_field": "destination.ip",
        "if": "ctx?.id_resp_h != null"
      }
    },
    {
      "rename": {
        "field": "id_resp_p",
        "target_field": "destination.port",
        "if": "ctx?.id_resp_p != null"
      }
    },
    {
      "set": {
        "field": "source.address",
        "value": "{{{source.ip}}}",
        "if": "ctx?.source?.ip != null"
      }
    },
    {
      "set": {
        "field": "destination.address",
        "value": "{{{destination.ip}}}",
        "if": "ctx?.destination?.ip != null"
      }
    },    
    {
      "set": {
        "field": "event.id",
        "value": "{{{uid}}}",
        "if": "ctx?.uid != null"
      }
    },
    {
      "set": {
        "field": "log.id.uid",
        "value": "{{{uid}}}",
        "if": "ctx?.uid != null"
      }
    },
    {
      "rename": {
        "field": "@sensor",
        "target_field": "observer.hostname",
        "if": "ctx['@sensor'] != null"
      }
    },
    {
      "rename": {
        "field": "_system_name",
        "target_field": "observer.hostname",
        "if": "ctx?._system_name != null"
      }
    },
    {
      "rename": {
        "field": "community_id",
        "target_field": "network.community_id",
        "if": "ctx?.community_id != null"
      }
    },
    {
      "rename": {
        "field": "inner_vlan",
        "target_field": "network.inner.vlan.id",
        "if": "ctx?.inner_vlan != null"
      }
    },
    {
      "rename": {
        "field": "vlan_inner",
        "target_field": "network.inner.vlan.id",
        "if": "ctx?.vlan_inner != null"
      }
    },
    {
      "rename": {
        "field": "vlan",
        "target_field": "network.vlan.id",
        "if": "ctx?.vlan != null"
      }
    },
    {
      "set": {
        "field": "event.ingested",
        "value": "{{{_ingest.timestamp}}}"
      }
    },
    {
      "rename": {
        "field": "num",
        "target_field": "event.count",
        "ignore_missing": true
      }
    },
    {
      "set": {
        "field": "labels.corelight.event_sub_type",
        "value": "{{{event.dataset}}}",
        "ignore_empty_value": true,
        "override": true,
        "if": "ctx.event?.dataset != null"
      }
    },
    {
      "gsub": {
        "description": "If any log name contains \"_red$\" (for reduced) then remove that from event.dataset to keep them from being decoupled even though it has identical field names, for the fields it does have, (ie: should go through the same config process) as it's counterpart. ie: dns_red can be treated indentically as dns.",
        "field": "event.dataset",
        "pattern": "_red$",
        "replacement": "",
        "if": "ctx.event?.dataset != null && ctx.event.dataset.contains('_red')"
      }
    },
    {
      "gsub": {
        "description": "If any log name contains \"^bro_\" (for older versions) then remove that from event.dataset to keep them from being decoupled",
        "field": "event.dataset",
        "pattern": "^bro_",
        "replacement": "",
        "if": "ctx.event?.dataset != null && ctx.event.dataset.contains('bro_')"
      }
    },
    {
      "remove": {
        "field": [
          "ts",
          "uid",
          "_write_ts"
        ],
        "ignore_missing": true
      }
    }
  ]
}
