{
  "description": "Corelight ingest pipeline for all logs. This ingest pipeline is from the Github repository https://github.com/corelight/ecs-mapping. Please file all questions or issues with this configuration in the corresponding Github repository.",
  "version": 2023120101,
  "processors": [
    {
      "pipeline": {
        "description": "Run custom user defined ingest pipeline, if it exists.",
        "name": "corelight-ecs-main-pipeline@custom",
        "ignore_missing_pipeline": true
      }
    },
    {
      "pipeline": {
        "name": "corelight-ecs-common-main-set_index_prefix_and_suffix-pipeline",
        "ignore_missing_pipeline": false
      }
    },
    {
      "pipeline": {
        "name": "corelight-ecs-common-main-pipeline",
        "ignore_missing_pipeline": false
      }
    },
    {
      "pipeline": {
        "description": "Common pipeline for Metric logs (metrics and stats logs).",
        "name": "corelight-ecs-common-metric-metrics_stats-pipeline",
        "ignore_missing_pipeline": false,
        "if": "ctx?.labels?.corelight?.event_sub_type != null && [ 'capture_loss', 'conn_doctor', 'corelight_cloud_stats', 'corelight_metrics_bro', 'corelight_metrics_cpu', 'corelight_metrics_disk', 'corelight_metrics_docker', 'corelight_metrics_iface', 'corelight_metrics_memory', 'corelight_metrics_s3', 'corelight_metrics_sftp', 'corelight_metrics_suricata', 'corelight_metrics_system', 'corelight_metrics_utilization', 'corelight_ml_metrics', 'corelight_overall_capture_loss', 'corelight_profiling', 'corelight_weird_stats', 'ml_metrics', 'namecache', 'packet_filter', 'reporter', 'smartpcap-stats', 'stats', 'suricata_stats', 'weird_stats' ].contains(ctx.labels?.corelight?.event_sub_type)"
      }
    },
    {
      "pipeline": {
        "description": "Common pipeline for System logs (system, iam, and netcontrol logs).",
        "name": "corelight-ecs-common-system-iam_netcontrol_system_audit-pipeline",
        "ignore_missing_pipeline": false,
        "if": "ctx?.labels?.corelight?.event_sub_type != null && [ 'audit', 'auditlog', 'broker', 'cluster', 'config', 'corelight_audit_log', 'corelight_license_capacity', 'loaded_scripts', 'netcontrol', 'netcontrol_drop', 'netcontrol_shunt', 'openflow' ].contains(ctx.labels?.corelight?.event_sub_type)"
      }
    },
    {
      "pipeline": {
        "description": "Call specific pipeline for a log using the original log name (labels.corelight.event_sub_type), if it exists (meaning there is a parser written for it) and temporary_metadata_is_protocol_log is 'yes' meaning it is not common to metric or system and thus would already be called through those common pipelines above.",
        "name": "corelight-ecs-{{{labels.corelight.event_sub_type}}}-pipeline",
        "ignore_missing_pipeline": true,
        "if": "ctx?.labels?.corelight?.event_sub_type != null && ctx.temporary_metadata_is_protocol_log == 'yes'"
      }
    },
    {
      "pipeline": {
        "description": "If is a protocol log do extra enrichment and parsing.",
        "name": "corelight-ecs-postprocess-call_enrichments-pipeline",
        "ignore_missing_pipeline": false,
        "if": "ctx.temporary_metadata_is_protocol_log == 'yes'"
      }
    },
    {
      "pipeline": {
        "description": "Catch any potential parse failures",
        "name": "corelight-ecs-postprocess-parse_failures-pipeline",
        "ignore_missing_pipeline": false,
        "if": "ctx?.event?.dataset == null || (ctx?.tags != null && ctx.tags.contains('parse_failure_critical')) || ctx['@timestamp'] == null"
      }
    },
    {
      "pipeline": {
        "description": "Run final pipeline.",
        "name": "corelight-ecs-postprocess-final-main-pipeline"
      }
    },
    {
      "pipeline": {
        "description": "Run custom user defined ingest pipeline, if it exists.",
        "name": "corelight-ecs-postprocess-final-main-pipeline@custom",
        "ignore_missing_pipeline": true
      }
    }
  ],
  "on_failure": [
    {
      "set": {
        "field": "error.message",
        "value": "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message {{ _ingest.on_failure_message }}"
      }
    },
    {
      "pipeline": {
        "description": "Run custom user defined ingest pipeline, if it exists.",
        "name": "corelight-ecs-postprocess-parse_failures-pipeline@custom",
        "ignore_missing_pipeline": true
      }
    },
    {
      "pipeline": {
        "description": "Run pipeline for handling ingest/parse failures (parse_failures).",
        "name": "corelight-ecs-postprocess-parse_failures-pipeline",
        "ignore_missing_pipeline": false
      }
    },
    {
      "pipeline": {
        "description": "Run final pipeline.",
        "name": "corelight-ecs-postprocess-final-main-pipeline"
      }
    },
    {
      "pipeline": {
        "description": "Run custom user defined ingest pipeline, if it exists.",
        "name": "corelight-ecs-postprocess-final-main-pipeline@custom",
        "ignore_missing_pipeline": true
      }
    }
  ]
}
