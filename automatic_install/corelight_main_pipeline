{
  "description": "A pipeline of pipelines for Corelight log files. This pipeline is from the Github repository https://github.com/corelight/ecs-mapping. Please file all questions or issues with this configuration in the corresponding Github repository.",
  "version": 11221,
  "processors": [
    {
      "pipeline": {
        "name": "corelight_general_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'conn'",
        "name": "corelight_conn_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'conn_long'",
        "name": "corelight_conn_pipeline"
      }
    },
    {
     "pipeline": {
        "if": "ctx.event.dataset == 'conn_red'",
        "name": "corelight_conn_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'dce_rpc'",
        "name": "corelight_dce_rpc_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'dhcp'",
        "name": "corelight_dhcp_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'dga'",
        "name": "corelight_dga_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'dns'",
        "name": "corelight_dns_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'dns_red'",
        "name": "corelight_dns_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'dnp3'",
        "name": "corelight_dnp3_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'dpd'",
        "name": "corelight_dnp3_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'encrypted_dns'",
        "name": "corelight_encrypted_dns_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'files'",
        "name": "corelight_files_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'files_red'",
        "name": "corelight_files_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'ftp'",
        "name": "corelight_ftp_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'generic_dns_tunnels'",
        "name": "corelight_generic_dns_tunnels_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'generic_icmp_tunnels'",
        "name": "corelight_generic_icmp_tunnels_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'gquic'",
        "name": "corelight_gquic_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'http'",
        "name": "corelight_http_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'http2'",
        "name": "corelight_http_pipeline"
      }
    },
    {
     "pipeline": {
        "if": "ctx.event.dataset == 'http_red'",
        "name": "corelight_http_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'intel'",
        "name": "corelight_intel_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'ipsec'",
        "name": "corelight_ipsec_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'irc'",
        "name": "corelight_irc_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'kerberos'",
        "name": "corelight_kerberos_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known-certs'",
        "name": "corelight_known-certs_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known-devices'",
        "name": "corelight_known-devices_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known-domains'",
        "name": "corelight_known-domains_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known-hosts'",
        "name": "corelight_known-hosts_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known-modbus'",
        "name": "corelight_known_modbus_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known-names'",
        "name": "corelight_known-names_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known-remotes'",
        "name": "corelight_known-remotes_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known-services'",
        "name": "corelight_known-services_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known-users'",
        "name": "corelight_known-users_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known_certs'",
        "name": "corelight_known_certs_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known_devices'",
        "name": "corelight_known_certs_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known_domains'",
        "name": "corelight_known_certs_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known_hosts'",
        "name": "corelight_known_hosts_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known_modbus'",
        "name": "corelight_known_modbus_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known_names'",
        "name": "corelight_known_hosts_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known_remotes'",
        "name": "corelight_known_hosts_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known_services'",
        "name": "corelight_known_services_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'known_users'",
        "name": "corelight_known_services_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'modbus'",
        "name": "corelight_modbus_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'modbus_register_change'",
        "name": "corelight_modbus-register-change_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'mqtt_connect'",
        "name": "corelight_mqtt_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'mqtt_publish'",
        "name": "corelight_mqtt_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'mqtt_subscribe'",
        "name": "corelight_mqtt_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'mysql'",
        "name": "corelight_mysql_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'notice'",
        "name": "corelight_notice_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'ntlm'",
        "name": "corelight_ntlm_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'ntp'",
        "name": "corelight_ntp_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'ocsp'",
        "name": "corelight_ocsp_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'pe'",
        "name": "corelight_pe_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'pop3'",
        "name": "corelight_pop3_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'radius'",
        "name": "corelight_radius_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'rdp'",
        "name": "corelight_rdp_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'rfb'",
        "name": "corelight_rfb_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'sip'",
        "name": "corelight_sip_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'smb_files'",
        "name": "corelight_smb-files_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'smb_mapping'",
        "name": "corelight_smb-mapping_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'smtp'",
        "name": "corelight_smtp_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'smtp_links'",
        "name": "corelight_smtp_links_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'snmp'",
        "name": "corelight_snmp_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'socks'",
        "name": "corelight_socks_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'software'",
        "name": "corelight_software_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'software_red'",
        "name": "corelight_software_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'stun'",
        "name": "corelight_stun_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'stun_nat'",
        "name": "corelight_stun_nat_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'meterpreter'",
        "name": "corelight_meterpreter_all_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'meterpreter_headers'",
        "name": "corelight_meterpreter_all_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'specific_dns_tunnels'",
        "name": "corelight_specific_dns_tunnels_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'ssh'",
        "name": "corelight_ssh_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'ssl'",
        "name": "corelight_ssl_pipeline"
      }
    },
    {
     "pipeline": {
        "if": "ctx.event.dataset == 'ssl_red'",
        "name": "corelight_ssl_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'stepping'",
        "name": "corelight_stepping_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'suricata_corelight'",
        "name": "corelight_suricata_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'syslog'",
        "name": "corelight_syslog_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'traceroute'",
        "name": "corelight_traceroute_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'tunnel'",
        "name": "corelight_tunnel_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'unknown_mime_type_discovery'",
        "name": "corelight_unknown_mime_type_discovery_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'weird'",
        "name": "corelight_weird_pipeline"
      }
    },
    {
     "pipeline": {
        "if": "ctx.event.dataset == 'weird_red'",
        "name": "corelight_weird_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'x509'",
        "name": "corelight_x509_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'x509_red'",
        "name": "corelight_x509_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'enip'",
        "name": "corelight_enip_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'profinet'",
        "name": "corelight_profinet_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'etc_viz'",
        "name": "corelight_etc_viz_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'log4j' || ctx.event.dataset == 'log4shell'",
        "name": "corelight_log4j_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'vpn'",
        "name": "corelight_vpn_pipeline"
      }
    },
    {
      "pipeline": {
        "if": "ctx.event.dataset == 'wireguard'",
        "name": "corelight_vpn_pipeline"
      }
    },
    {
      "set": {
        "description": "This field can be used to determine if a data type is a metric or not. Set all as 'no' first, then once it hits the specific call to the pipelines that handle metrics - it will be then be set to 'yes' This is a sort of tag. But tags are not good to use because of the drastic pipeline inefficiency of using a for in check.. so we create our own field and use an exact compare check",
        "field": "temporary_metadata_is_metric_log",
        "value": "no"
      }
    },
    {
      "set": {
        "description": "This field can be used to determine if a data type is a stats or not. Set all as 'no' first, then once it hits the specific call to the pipelines that handle stats - it will be then be set to 'yes' This is a sort of tag. But tags are not good to use because of the drastic pipeline inefficiency of using a for in check.. so we create our own field and use an exact compare check",
        "field": "temporary_metadata_is_stats_log",
        "value": "no"
      }
    },
    {
      "set": {
        "description": "This field can be used to determine if a data type is a netcontrol or not. Set all as 'no' first, then once it hits the specific call to the pipelines that handle stats - it will be then be set to 'yes' This is a sort of tag. But tags are not good to use because of the drastic pipeline inefficiency of using a for in check.. so we create our own field and use an exact compare check",
        "field": "temporary_metadata_is_netcontrol_log",
        "value": "no"
      }
    },
    {
      "set": {
        "description": "This field can be used to determine if a data type is a system type log or not. Set all as 'no' first, then once it hits the specific call to the pipelines that system logs - it will be then be set to 'yes' This is a sort of tag. But tags are not good to use because of the drastic pipeline inefficiency of using a for in check.. so we create our own field and use an exact compare check",
        "field": "temporary_metadata_is_system_log",
        "value": "no"
      }
    },
    {
      "pipeline": {
        "description": "Logs that are system related.",
        "if": "ctx.event.dataset == 'audit' || ctx.event.dataset == 'auditlog' || ctx.event.dataset == 'broker' || ctx.event.dataset == 'cluster' || ctx.event.dataset == 'config' || ctx.event.dataset == 'corelight_audit_log' || ctx.event.dataset == 'corelight_license_capacity' || ctx.event.dataset == 'loaded_scripts'",
        "name": "corelight_system_related_info_general_pipeline"
      }
    },
    {
      "pipeline": {
        "description": "Logs that are metrics.",
        "if": "ctx.event.dataset == 'corelight_metrics_bro' || ctx.event.dataset == 'corelight_metrics_cpu' || ctx.event.dataset == 'corelight_metrics_disk' || ctx.event.dataset == 'corelight_metrics_docker' || ctx.event.dataset == 'corelight_metrics_iface' || ctx.event.dataset == 'corelight_metrics_memory' || ctx.event.dataset == 'corelight_metrics_s3' || ctx.event.dataset == 'corelight_metrics_sftp' || ctx.event.dataset == 'corelight_metrics_suricata' || ctx.event.dataset == 'corelight_metrics_system' || ctx.event.dataset == 'corelight_metrics_utilization'",
        "name": "corelight_metrics_general_pipeline"
      }
    },
    {
      "pipeline": {
        "description": "Logs that are stats.",
        "if": "ctx.event.dataset == 'capture_loss' || ctx.event.dataset == 'conn_doctor' || ctx.event.dataset == 'corelight_cloud_stats' || ctx.event.dataset == 'corelight_overall_capture_loss' || ctx.event.dataset == 'corelight_profiling'|| ctx.event.dataset == 'corelight_weird_stats' || ctx.event.dataset == 'corelight_weird_stats' || ctx.event.dataset == 'namecache'|| ctx.event.dataset == 'packet_filter' || ctx.event.dataset == 'reporter' || ctx.event.dataset == 'smartpcap-stats' || ctx.event.dataset == 'stats' || ctx.event.dataset == 'suricata_stats' || ctx.event.dataset == 'weird_stats'",
        "name": "corelight_stats_general_pipeline"
      }
    },
    {
      "pipeline": {
        "description": "Logs that are netcontrol.",
        "if": "ctx.event.dataset == 'netcontrol' || ctx.event.dataset == 'netcontrol_drop' || ctx.event.dataset == 'netcontrol_shunt' || ctx.event.dataset == 'openflow'",
        "name": "corelight_netcontrol_general_pipeline"
      }
    },
    {
      "pipeline": {
        "description": "If is a metadata log do extra enrichment and parsing. Metadata log AKA application or network protocol log.. ie: not a metric, stat, or other system log.",
        "if": "ctx.temporary_metadata_is_metric_log == 'no' && ctx.temporary_metadata_is_netcontrol_log == 'no' && ctx.temporary_metadata_is_stats_log == 'no' && ctx.temporary_metadata_is_system_log == 'no'",
        "name": "corelight_postprocess_metadata_logs_pipeline"
      }
    },
    {
      "pipeline": {
        "description": "Run pipeline that all logs need.",
        "name": "corelight_postprocess_all_pipeline"
      }
    }
  ],
  "on_failure" : [
    {
      "set": {
        "field": "event.ingested",
        "value": "{{_ingest.timestamp}}",
        "if": "ctx.event?.ingested == null"
      }
    },
    {
      "date_index_name" : {
        "field" : "event.ingested",
        "index_name_prefix" : "parse-failures-corelight-",
        "date_formats": [ "yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSSXX", "yyyy-MM-dd'T'HH:mm:ss.SSSSSSXX", "yyyy-MM-dd'T'HH:mm:ss.SSSXX" ],
        "date_rounding": "d",
        "ignore_failure": true,
        "index_name_format": "yyyy.MM.dd"
      }
    },
    {
      "set": {
        "field": "error.message",
        "value": "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message {{ _ingest.on_failure_message }}"
      }
    },
    {
      "remove": {
        "field": "id",
        "ignore_failure": true,
        "ignore_missing" : true
      }
    }
  ]
}
